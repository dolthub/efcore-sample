using System;
using System.Collections.Generic;

namespace DoltEFCoreDemo;

// Product and Customer have a many-to-many relationship: Each customer may be 
// associated with many products, and each product may be associated with many 
// customers. Entity Framework Core detects this relationship automatically
// from Product having a List<Customer> and Customer having a List<Product>.

public class Product {
    // Note the use of Guid here. Instead of using an auto_increment integer ID, 
    // it's often better to use a UUID. This is particularly true when you are working 
    // with branches or clones and have multiple sources collaborating on a dataset. 
    // Using a Guid/UUID allows rows created on different branches or forks to
    // cleanly merge into a main branch without hitting merge conflicts on integer IDs
    // like you would see with auto_increment columns. 
    // By defining this type as a Guid, we let EF Core initialize the value for us. This
    // is needed, since EF Core needs to know the primary key value identifying this entity,
    // and if it is generated by the database, then EF Core is unable to retrieve it.
    // For more info, see: https://www.dolthub.com/blog/2023-10-27-uuid-keys/
    public Guid ProductId { get; set; }
    public string Name { get; set; }
    public DateOnly? ReleaseDate { get; set; }
    public List<Customer> Customers { get; } = new();
}

public class Customer {
    public Guid CustomerId { get; set; }
    public string Name { get; set; }
    public List<Product> Products { get; set; } = new();
}
